"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-flying-item";
exports.ids = ["vendor-chunks/react-flying-item"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-flying-item/dist/index.modern.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-flying-item/dist/index.modern.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction e() {\n    return (e = Object.assign ? Object.assign.bind() : function(e) {\n        for(var t = 1; t < arguments.length; t++){\n            var r = arguments[t];\n            for(var n in r)Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);\n        }\n        return e;\n    }).apply(this, arguments);\n}\nfunction t(e, t) {\n    return e(t = {\n        exports: {}\n    }, t.exports), t.exports;\n/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ }\nvar r = Symbol.for(\"react.element\"), n = Symbol.for(\"react.portal\"), o = Symbol.for(\"react.fragment\"), a = Symbol.for(\"react.strict_mode\"), u = Symbol.for(\"react.profiler\"), i = Symbol.for(\"react.provider\"), c = Symbol.for(\"react.context\"), s = Symbol.for(\"react.forward_ref\"), l = Symbol.for(\"react.suspense\"), f = Symbol.for(\"react.memo\"), p = Symbol.for(\"react.lazy\"), d = Symbol.iterator, y = {\n    isMounted: function() {\n        return !1;\n    },\n    enqueueForceUpdate: function() {},\n    enqueueReplaceState: function() {},\n    enqueueSetState: function() {}\n}, m = Object.assign, v = {};\nfunction h(e, t, r) {\n    this.props = e, this.context = t, this.refs = v, this.updater = r || y;\n}\nfunction g() {}\nfunction b(e, t, r) {\n    this.props = e, this.context = t, this.refs = v, this.updater = r || y;\n}\nh.prototype.isReactComponent = {}, h.prototype.setState = function(e, t) {\n    if (\"object\" != typeof e && \"function\" != typeof e && null != e) throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");\n    this.updater.enqueueSetState(this, e, t, \"setState\");\n}, h.prototype.forceUpdate = function(e) {\n    this.updater.enqueueForceUpdate(this, e, \"forceUpdate\");\n}, g.prototype = h.prototype;\nvar _ = b.prototype = new g;\n_.constructor = b, m(_, h.prototype), _.isPureReactComponent = !0;\nvar w = Array.isArray, S = Object.prototype.hasOwnProperty, k = {\n    current: null\n}, R = {\n    key: !0,\n    ref: !0,\n    __self: !0,\n    __source: !0\n};\nfunction C(e, t, n) {\n    var o, a = {}, u = null, i = null;\n    if (null != t) for(o in void 0 !== t.ref && (i = t.ref), void 0 !== t.key && (u = \"\" + t.key), t)S.call(t, o) && !R.hasOwnProperty(o) && (a[o] = t[o]);\n    var c = arguments.length - 2;\n    if (1 === c) a.children = n;\n    else if (1 < c) {\n        for(var s = Array(c), l = 0; l < c; l++)s[l] = arguments[l + 2];\n        a.children = s;\n    }\n    if (e && e.defaultProps) for(o in c = e.defaultProps)void 0 === a[o] && (a[o] = c[o]);\n    return {\n        $$typeof: r,\n        type: e,\n        key: u,\n        ref: i,\n        props: a,\n        _owner: k.current\n    };\n}\nfunction O(e) {\n    return \"object\" == typeof e && null !== e && e.$$typeof === r;\n}\nvar E = /\\/+/g;\nfunction j(e, t) {\n    return \"object\" == typeof e && null !== e && null != e.key ? function(e) {\n        var t = {\n            \"=\": \"=0\",\n            \":\": \"=2\"\n        };\n        return \"$\" + e.replace(/[=:]/g, function(e) {\n            return t[e];\n        });\n    }(\"\" + e.key) : t.toString(36);\n}\nfunction P(e, t, o) {\n    if (null == e) return e;\n    var a = [], u = 0;\n    return function e(t, o, a, u, i) {\n        var c = typeof t;\n        \"undefined\" !== c && \"boolean\" !== c || (t = null);\n        var s = !1;\n        if (null === t) s = !0;\n        else switch(c){\n            case \"string\":\n            case \"number\":\n                s = !0;\n                break;\n            case \"object\":\n                switch(t.$$typeof){\n                    case r:\n                    case n:\n                        s = !0;\n                }\n        }\n        if (s) return i = i(s = t), t = \"\" === u ? \".\" + j(s, 0) : u, w(i) ? (a = \"\", null != t && (a = t.replace(E, \"$&/\") + \"/\"), e(i, o, a, \"\", function(e) {\n            return e;\n        })) : null != i && (O(i) && (i = function(e, t) {\n            return {\n                $$typeof: r,\n                type: e.type,\n                key: t,\n                ref: e.ref,\n                props: e.props,\n                _owner: e._owner\n            };\n        }(i, a + (!i.key || s && s.key === i.key ? \"\" : (\"\" + i.key).replace(E, \"$&/\") + \"/\") + t)), o.push(i)), 1;\n        if (s = 0, u = \"\" === u ? \".\" : u + \":\", w(t)) for(var l = 0; l < t.length; l++){\n            var f = u + j(c = t[l], l);\n            s += e(c, o, a, f, i);\n        }\n        else if (\"function\" == typeof (f = function(e) {\n            return null === e || \"object\" != typeof e ? null : \"function\" == typeof (e = d && e[d] || e[\"@@iterator\"]) ? e : null;\n        }(t))) for(t = f.call(t), l = 0; !(c = t.next()).done;)s += e(c = c.value, o, a, f = u + j(c, l++), i);\n        else if (\"object\" === c) throw o = String(t), Error(\"Objects are not valid as a React child (found: \" + (\"[object Object]\" === o ? \"object with keys {\" + Object.keys(t).join(\", \") + \"}\" : o) + \"). If you meant to render a collection of children, use an array instead.\");\n        return s;\n    }(e, a, \"\", \"\", function(e) {\n        return t.call(o, e, u++);\n    }), a;\n}\nfunction x(e) {\n    if (-1 === e._status) {\n        var t = e._result;\n        (t = t()).then(function(t) {\n            0 !== e._status && -1 !== e._status || (e._status = 1, e._result = t);\n        }, function(t) {\n            0 !== e._status && -1 !== e._status || (e._status = 2, e._result = t);\n        }), -1 === e._status && (e._status = 0, e._result = t);\n    }\n    if (1 === e._status) return e._result.default;\n    throw e._result;\n}\nvar $ = {\n    current: null\n}, T = {\n    transition: null\n}, D = {\n    Children: {\n        map: P,\n        forEach: function(e, t, r) {\n            P(e, function() {\n                t.apply(this, arguments);\n            }, r);\n        },\n        count: function(e) {\n            var t = 0;\n            return P(e, function() {\n                t++;\n            }), t;\n        },\n        toArray: function(e) {\n            return P(e, function(e) {\n                return e;\n            }) || [];\n        },\n        only: function(e) {\n            if (!O(e)) throw Error(\"React.Children.only expected to receive a single React element child.\");\n            return e;\n        }\n    },\n    Component: h,\n    Fragment: o,\n    Profiler: u,\n    PureComponent: b,\n    StrictMode: a,\n    Suspense: l,\n    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n        ReactCurrentDispatcher: $,\n        ReactCurrentBatchConfig: T,\n        ReactCurrentOwner: k\n    },\n    cloneElement: function(e, t, n) {\n        if (null == e) throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + e + \".\");\n        var o = m({}, e.props), a = e.key, u = e.ref, i = e._owner;\n        if (null != t) {\n            if (void 0 !== t.ref && (u = t.ref, i = k.current), void 0 !== t.key && (a = \"\" + t.key), e.type && e.type.defaultProps) var c = e.type.defaultProps;\n            for(s in t)S.call(t, s) && !R.hasOwnProperty(s) && (o[s] = void 0 === t[s] && void 0 !== c ? c[s] : t[s]);\n        }\n        var s = arguments.length - 2;\n        if (1 === s) o.children = n;\n        else if (1 < s) {\n            c = Array(s);\n            for(var l = 0; l < s; l++)c[l] = arguments[l + 2];\n            o.children = c;\n        }\n        return {\n            $$typeof: r,\n            type: e.type,\n            key: a,\n            ref: u,\n            props: o,\n            _owner: i\n        };\n    },\n    createContext: function(e) {\n        return (e = {\n            $$typeof: c,\n            _currentValue: e,\n            _currentValue2: e,\n            _threadCount: 0,\n            Provider: null,\n            Consumer: null,\n            _defaultValue: null,\n            _globalName: null\n        }).Provider = {\n            $$typeof: i,\n            _context: e\n        }, e.Consumer = e;\n    },\n    createElement: C,\n    createFactory: function(e) {\n        var t = C.bind(null, e);\n        return t.type = e, t;\n    },\n    createRef: function() {\n        return {\n            current: null\n        };\n    },\n    forwardRef: function(e) {\n        return {\n            $$typeof: s,\n            render: e\n        };\n    },\n    isValidElement: O,\n    lazy: function(e) {\n        return {\n            $$typeof: p,\n            _payload: {\n                _status: -1,\n                _result: e\n            },\n            _init: x\n        };\n    },\n    memo: function(e, t) {\n        return {\n            $$typeof: f,\n            type: e,\n            compare: void 0 === t ? null : t\n        };\n    },\n    startTransition: function(e) {\n        var t = T.transition;\n        T.transition = {};\n        try {\n            e();\n        } finally{\n            T.transition = t;\n        }\n    },\n    unstable_act: function() {\n        throw Error(\"act(...) is not supported in production builds of React.\");\n    },\n    useCallback: function(e, t) {\n        return $.current.useCallback(e, t);\n    },\n    useContext: function(e) {\n        return $.current.useContext(e);\n    },\n    useDebugValue: function() {},\n    useDeferredValue: function(e) {\n        return $.current.useDeferredValue(e);\n    },\n    useEffect: function(e, t) {\n        return $.current.useEffect(e, t);\n    },\n    useId: function() {\n        return $.current.useId();\n    },\n    useImperativeHandle: function(e, t, r) {\n        return $.current.useImperativeHandle(e, t, r);\n    },\n    useInsertionEffect: function(e, t) {\n        return $.current.useInsertionEffect(e, t);\n    },\n    useLayoutEffect: function(e, t) {\n        return $.current.useLayoutEffect(e, t);\n    },\n    useMemo: function(e, t) {\n        return $.current.useMemo(e, t);\n    },\n    useReducer: function(e, t, r) {\n        return $.current.useReducer(e, t, r);\n    },\n    useRef: function(e) {\n        return $.current.useRef(e);\n    },\n    useState: function(e) {\n        return $.current.useState(e);\n    },\n    useSyncExternalStore: function(e, t, r) {\n        return $.current.useSyncExternalStore(e, t, r);\n    },\n    useTransition: function() {\n        return $.current.useTransition();\n    },\n    version: \"18.2.0\"\n}, I = t(function(e, t) {\n     true && function() {\n        \"undefined\" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);\n        var r = Symbol.for(\"react.element\"), n = Symbol.for(\"react.portal\"), o = Symbol.for(\"react.fragment\"), a = Symbol.for(\"react.strict_mode\"), u = Symbol.for(\"react.profiler\"), i = Symbol.for(\"react.provider\"), c = Symbol.for(\"react.context\"), s = Symbol.for(\"react.forward_ref\"), l = Symbol.for(\"react.suspense\"), f = Symbol.for(\"react.suspense_list\"), p = Symbol.for(\"react.memo\"), d = Symbol.for(\"react.lazy\"), y = Symbol.for(\"react.offscreen\"), m = Symbol.iterator;\n        function v(e) {\n            if (null === e || \"object\" != typeof e) return null;\n            var t = m && e[m] || e[\"@@iterator\"];\n            return \"function\" == typeof t ? t : null;\n        }\n        var h = {\n            current: null\n        }, g = {\n            transition: null\n        }, b = {\n            current: null,\n            isBatchingLegacy: !1,\n            didScheduleLegacyUpdate: !1\n        }, _ = {\n            current: null\n        }, w = {}, S = null;\n        function k(e) {\n            S = e;\n        }\n        w.setExtraStackFrame = function(e) {\n            S = e;\n        }, w.getCurrentStack = null, w.getStackAddendum = function() {\n            var e = \"\";\n            S && (e += S);\n            var t = w.getCurrentStack;\n            return t && (e += t() || \"\"), e;\n        };\n        var R = {\n            ReactCurrentDispatcher: h,\n            ReactCurrentBatchConfig: g,\n            ReactCurrentOwner: _\n        };\n        function C(e) {\n            for(var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++)r[n - 1] = arguments[n];\n            E(\"warn\", e, r);\n        }\n        function O(e) {\n            for(var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++)r[n - 1] = arguments[n];\n            E(\"error\", e, r);\n        }\n        function E(e, t, r) {\n            var n = R.ReactDebugCurrentFrame.getStackAddendum();\n            \"\" !== n && (t += \"%s\", r = r.concat([\n                n\n            ]));\n            var o = r.map(function(e) {\n                return String(e);\n            });\n            o.unshift(\"Warning: \" + t), Function.prototype.apply.call(console[e], console, o);\n        }\n        R.ReactDebugCurrentFrame = w, R.ReactCurrentActQueue = b;\n        var j = {};\n        function P(e, t) {\n            var r = e.constructor, n = r && (r.displayName || r.name) || \"ReactClass\", o = n + \".\" + t;\n            j[o] || (O(\"Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.\", t, n), j[o] = !0);\n        }\n        var x = {\n            isMounted: function(e) {\n                return !1;\n            },\n            enqueueForceUpdate: function(e, t, r) {\n                P(e, \"forceUpdate\");\n            },\n            enqueueReplaceState: function(e, t, r, n) {\n                P(e, \"replaceState\");\n            },\n            enqueueSetState: function(e, t, r, n) {\n                P(e, \"setState\");\n            }\n        }, $ = Object.assign, T = {};\n        function D(e, t, r) {\n            this.props = e, this.context = t, this.refs = T, this.updater = r || x;\n        }\n        Object.freeze(T), D.prototype.isReactComponent = {}, D.prototype.setState = function(e, t) {\n            if (\"object\" != typeof e && \"function\" != typeof e && null != e) throw new Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");\n            this.updater.enqueueSetState(this, e, t, \"setState\");\n        }, D.prototype.forceUpdate = function(e) {\n            this.updater.enqueueForceUpdate(this, e, \"forceUpdate\");\n        };\n        var I = {\n            isMounted: [\n                \"isMounted\",\n                \"Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\"\n            ],\n            replaceState: [\n                \"replaceState\",\n                \"Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).\"\n            ]\n        }, L = function(e, t) {\n            Object.defineProperty(D.prototype, e, {\n                get: function() {\n                    C(\"%s(...) is deprecated in plain JavaScript React classes. %s\", t[0], t[1]);\n                }\n            });\n        };\n        for(var N in I)I.hasOwnProperty(N) && L(N, I[N]);\n        function A() {}\n        function F(e, t, r) {\n            this.props = e, this.context = t, this.refs = T, this.updater = r || x;\n        }\n        A.prototype = D.prototype;\n        var M = F.prototype = new A;\n        M.constructor = F, $(M, D.prototype), M.isPureReactComponent = !0;\n        var V = Array.isArray;\n        function U(e) {\n            return V(e);\n        }\n        function z(e) {\n            return \"\" + e;\n        }\n        function q(e) {\n            if (function(e) {\n                try {\n                    return z(e), !1;\n                } catch (e) {\n                    return !0;\n                }\n            }(e)) return O(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", function(e) {\n                return \"function\" == typeof Symbol && Symbol.toStringTag && e[Symbol.toStringTag] || e.constructor.name || \"Object\";\n            }(e)), z(e);\n        }\n        function B(e) {\n            return e.displayName || \"Context\";\n        }\n        function Y(e) {\n            if (null == e) return null;\n            if (\"number\" == typeof e.tag && O(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), \"function\" == typeof e) return e.displayName || e.name || null;\n            if (\"string\" == typeof e) return e;\n            switch(e){\n                case o:\n                    return \"Fragment\";\n                case n:\n                    return \"Portal\";\n                case u:\n                    return \"Profiler\";\n                case a:\n                    return \"StrictMode\";\n                case l:\n                    return \"Suspense\";\n                case f:\n                    return \"SuspenseList\";\n            }\n            if (\"object\" == typeof e) switch(e.$$typeof){\n                case c:\n                    return B(e) + \".Consumer\";\n                case i:\n                    return B(e._context) + \".Provider\";\n                case s:\n                    return function(e, t, r) {\n                        var n = e.displayName;\n                        if (n) return n;\n                        var o = t.displayName || t.name || \"\";\n                        return \"\" !== o ? \"ForwardRef(\" + o + \")\" : \"ForwardRef\";\n                    }(e, e.render);\n                case p:\n                    var t = e.displayName || null;\n                    return null !== t ? t : Y(e.type) || \"Memo\";\n                case d:\n                    var r = e._payload, y = e._init;\n                    try {\n                        return Y(y(r));\n                    } catch (e) {\n                        return null;\n                    }\n            }\n            return null;\n        }\n        var H, W, G, K = Object.prototype.hasOwnProperty, J = {\n            key: !0,\n            ref: !0,\n            __self: !0,\n            __source: !0\n        };\n        function X(e) {\n            if (K.call(e, \"ref\")) {\n                var t = Object.getOwnPropertyDescriptor(e, \"ref\").get;\n                if (t && t.isReactWarning) return !1;\n            }\n            return void 0 !== e.ref;\n        }\n        function Q(e) {\n            if (K.call(e, \"key\")) {\n                var t = Object.getOwnPropertyDescriptor(e, \"key\").get;\n                if (t && t.isReactWarning) return !1;\n            }\n            return void 0 !== e.key;\n        }\n        function Z(e, t) {\n            var r = function() {\n                H || (H = !0, O(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", t));\n            };\n            r.isReactWarning = !0, Object.defineProperty(e, \"key\", {\n                get: r,\n                configurable: !0\n            });\n        }\n        function ee(e, t) {\n            var r = function() {\n                W || (W = !0, O(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", t));\n            };\n            r.isReactWarning = !0, Object.defineProperty(e, \"ref\", {\n                get: r,\n                configurable: !0\n            });\n        }\n        function te(e) {\n            if (\"string\" == typeof e.ref && _.current && e.__self && _.current.stateNode !== e.__self) {\n                var t = Y(_.current.type);\n                G[t] || (O('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', t, e.ref), G[t] = !0);\n            }\n        }\n        G = {};\n        var re = function(e, t, n, o, a, u, i) {\n            var c = {\n                $$typeof: r,\n                type: e,\n                key: t,\n                ref: n,\n                props: i,\n                _owner: u,\n                _store: {}\n            };\n            return Object.defineProperty(c._store, \"validated\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !0,\n                value: !1\n            }), Object.defineProperty(c, \"_self\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: o\n            }), Object.defineProperty(c, \"_source\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: a\n            }), Object.freeze && (Object.freeze(c.props), Object.freeze(c)), c;\n        };\n        function ne(e, t, r) {\n            var n, o = {}, a = null, u = null, i = null, c = null;\n            if (null != t) for(n in X(t) && (u = t.ref, te(t)), Q(t) && (q(t.key), a = \"\" + t.key), i = void 0 === t.__self ? null : t.__self, c = void 0 === t.__source ? null : t.__source, t)K.call(t, n) && !J.hasOwnProperty(n) && (o[n] = t[n]);\n            var s = arguments.length - 2;\n            if (1 === s) o.children = r;\n            else if (s > 1) {\n                for(var l = Array(s), f = 0; f < s; f++)l[f] = arguments[f + 2];\n                Object.freeze && Object.freeze(l), o.children = l;\n            }\n            if (e && e.defaultProps) {\n                var p = e.defaultProps;\n                for(n in p)void 0 === o[n] && (o[n] = p[n]);\n            }\n            if (a || u) {\n                var d = \"function\" == typeof e ? e.displayName || e.name || \"Unknown\" : e;\n                a && Z(o, d), u && ee(o, d);\n            }\n            return re(e, a, u, i, c, _.current, o);\n        }\n        function oe(e, t, r) {\n            if (null == e) throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + e + \".\");\n            var n, o, a = $({}, e.props), u = e.key, i = e.ref, c = e._self, s = e._source, l = e._owner;\n            if (null != t) for(n in X(t) && (i = t.ref, l = _.current), Q(t) && (q(t.key), u = \"\" + t.key), e.type && e.type.defaultProps && (o = e.type.defaultProps), t)K.call(t, n) && !J.hasOwnProperty(n) && (a[n] = void 0 === t[n] && void 0 !== o ? o[n] : t[n]);\n            var f = arguments.length - 2;\n            if (1 === f) a.children = r;\n            else if (f > 1) {\n                for(var p = Array(f), d = 0; d < f; d++)p[d] = arguments[d + 2];\n                a.children = p;\n            }\n            return re(e.type, u, i, c, s, l, a);\n        }\n        function ae(e) {\n            return \"object\" == typeof e && null !== e && e.$$typeof === r;\n        }\n        var ue, ie = !1, ce = /\\/+/g;\n        function se(e) {\n            return e.replace(ce, \"$&/\");\n        }\n        function le(e, t) {\n            return \"object\" == typeof e && null !== e && null != e.key ? (q(e.key), r = {\n                \"=\": \"=0\",\n                \":\": \"=2\"\n            }, \"$\" + (\"\" + e.key).replace(/[=:]/g, function(e) {\n                return r[e];\n            })) : t.toString(36);\n            var r;\n        }\n        function fe(e, t, o) {\n            if (null == e) return e;\n            var a = [], u = 0;\n            return function e(t, o, a, u, i) {\n                var c = typeof t;\n                \"undefined\" !== c && \"boolean\" !== c || (t = null);\n                var s, l, f, p = !1;\n                if (null === t) p = !0;\n                else switch(c){\n                    case \"string\":\n                    case \"number\":\n                        p = !0;\n                        break;\n                    case \"object\":\n                        switch(t.$$typeof){\n                            case r:\n                            case n:\n                                p = !0;\n                        }\n                }\n                if (p) {\n                    var d = t, y = i(d), m = \"\" === u ? \".\" + le(d, 0) : u;\n                    if (U(y)) {\n                        var h = \"\";\n                        null != m && (h = se(m) + \"/\"), e(y, o, h, \"\", function(e) {\n                            return e;\n                        });\n                    } else null != y && (ae(y) && (!y.key || d && d.key === y.key || q(y.key), s = y, l = a + (!y.key || d && d.key === y.key ? \"\" : se(\"\" + y.key) + \"/\") + m, y = re(s.type, l, s.ref, s._self, s._source, s._owner, s.props)), o.push(y));\n                    return 1;\n                }\n                var g = 0, b = \"\" === u ? \".\" : u + \":\";\n                if (U(t)) for(var _ = 0; _ < t.length; _++)g += e(f = t[_], o, a, b + le(f, _), i);\n                else {\n                    var w = v(t);\n                    if (\"function\" == typeof w) {\n                        var S = t;\n                        w === S.entries && (ie || C(\"Using Maps as children is not supported. Use an array of keyed ReactElements instead.\"), ie = !0);\n                        for(var k, R = w.call(S), O = 0; !(k = R.next()).done;)g += e(f = k.value, o, a, b + le(f, O++), i);\n                    } else if (\"object\" === c) {\n                        var E = String(t);\n                        throw new Error(\"Objects are not valid as a React child (found: \" + (\"[object Object]\" === E ? \"object with keys {\" + Object.keys(t).join(\", \") + \"}\" : E) + \"). If you meant to render a collection of children, use an array instead.\");\n                    }\n                }\n                return g;\n            }(e, a, \"\", \"\", function(e) {\n                return t.call(o, e, u++);\n            }), a;\n        }\n        function pe(e) {\n            if (-1 === e._status) {\n                var t = (0, e._result)();\n                if (t.then(function(t) {\n                    if (0 === e._status || -1 === e._status) {\n                        var r = e;\n                        r._status = 1, r._result = t;\n                    }\n                }, function(t) {\n                    if (0 === e._status || -1 === e._status) {\n                        var r = e;\n                        r._status = 2, r._result = t;\n                    }\n                }), -1 === e._status) {\n                    var r = e;\n                    r._status = 0, r._result = t;\n                }\n            }\n            if (1 === e._status) {\n                var n = e._result;\n                return void 0 === n && O(\"lazy: Expected the result of a dynamic import() call. Instead received: %s\\n\\nYour code should look like: \\n  const MyComponent = lazy(() => import('./MyComponent'))\\n\\nDid you accidentally put curly braces around the import?\", n), \"default\" in n || O(\"lazy: Expected the result of a dynamic import() call. Instead received: %s\\n\\nYour code should look like: \\n  const MyComponent = lazy(() => import('./MyComponent'))\", n), n.default;\n            }\n            throw e._result;\n        }\n        function de(e) {\n            return \"string\" == typeof e || \"function\" == typeof e || e === o || e === u || e === a || e === l || e === f || e === y || \"object\" == typeof e && null !== e && (e.$$typeof === d || e.$$typeof === p || e.$$typeof === i || e.$$typeof === c || e.$$typeof === s || e.$$typeof === ue || void 0 !== e.getModuleId);\n        }\n        function ye() {\n            var e = h.current;\n            return null === e && O(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\"), e;\n        }\n        ue = Symbol.for(\"react.module.reference\");\n        var me, ve, he, ge, be, _e, we, Se = 0;\n        function ke() {}\n        ke.__reactDisabledLog = !0;\n        var Re, Ce = R.ReactCurrentDispatcher;\n        function Oe(e, t, r) {\n            if (void 0 === Re) try {\n                throw Error();\n            } catch (e) {\n                var n = e.stack.trim().match(/\\n( *(at )?)/);\n                Re = n && n[1] || \"\";\n            }\n            return \"\\n\" + Re + e;\n        }\n        var Ee, je = !1, Pe = \"function\" == typeof WeakMap ? WeakMap : Map;\n        function xe(e, t) {\n            if (!e || je) return \"\";\n            var r, n = Ee.get(e);\n            if (void 0 !== n) return n;\n            je = !0;\n            var o, a = Error.prepareStackTrace;\n            Error.prepareStackTrace = void 0, o = Ce.current, Ce.current = null, function() {\n                if (0 === Se) {\n                    me = console.log, ve = console.info, he = console.warn, ge = console.error, be = console.group, _e = console.groupCollapsed, we = console.groupEnd;\n                    var e = {\n                        configurable: !0,\n                        enumerable: !0,\n                        value: ke,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        info: e,\n                        log: e,\n                        warn: e,\n                        error: e,\n                        group: e,\n                        groupCollapsed: e,\n                        groupEnd: e\n                    });\n                }\n                Se++;\n            }();\n            try {\n                if (t) {\n                    var u = function() {\n                        throw Error();\n                    };\n                    if (Object.defineProperty(u.prototype, \"props\", {\n                        set: function() {\n                            throw Error();\n                        }\n                    }), \"object\" == typeof Reflect && Reflect.construct) {\n                        try {\n                            Reflect.construct(u, []);\n                        } catch (e) {\n                            r = e;\n                        }\n                        Reflect.construct(e, [], u);\n                    } else {\n                        try {\n                            u.call();\n                        } catch (e) {\n                            r = e;\n                        }\n                        e.call(u.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch (e) {\n                        r = e;\n                    }\n                    e();\n                }\n            } catch (t) {\n                if (t && r && \"string\" == typeof t.stack) {\n                    for(var i = t.stack.split(\"\\n\"), c = r.stack.split(\"\\n\"), s = i.length - 1, l = c.length - 1; s >= 1 && l >= 0 && i[s] !== c[l];)l--;\n                    for(; s >= 1 && l >= 0; s--, l--)if (i[s] !== c[l]) {\n                        if (1 !== s || 1 !== l) do {\n                            if (s--, --l < 0 || i[s] !== c[l]) {\n                                var f = \"\\n\" + i[s].replace(\" at new \", \" at \");\n                                return e.displayName && f.includes(\"<anonymous>\") && (f = f.replace(\"<anonymous>\", e.displayName)), \"function\" == typeof e && Ee.set(e, f), f;\n                            }\n                        }while (s >= 1 && l >= 0);\n                        break;\n                    }\n                }\n            } finally{\n                je = !1, Ce.current = o, function() {\n                    if (0 == --Se) {\n                        var e = {\n                            configurable: !0,\n                            enumerable: !0,\n                            writable: !0\n                        };\n                        Object.defineProperties(console, {\n                            log: $({}, e, {\n                                value: me\n                            }),\n                            info: $({}, e, {\n                                value: ve\n                            }),\n                            warn: $({}, e, {\n                                value: he\n                            }),\n                            error: $({}, e, {\n                                value: ge\n                            }),\n                            group: $({}, e, {\n                                value: be\n                            }),\n                            groupCollapsed: $({}, e, {\n                                value: _e\n                            }),\n                            groupEnd: $({}, e, {\n                                value: we\n                            })\n                        });\n                    }\n                    Se < 0 && O(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n                }(), Error.prepareStackTrace = a;\n            }\n            var p = e ? e.displayName || e.name : \"\", d = p ? Oe(p) : \"\";\n            return \"function\" == typeof e && Ee.set(e, d), d;\n        }\n        function $e(e, t, r) {\n            if (null == e) return \"\";\n            if (\"function\" == typeof e) return xe(e, function(e) {\n                var t = e.prototype;\n                return !(!t || !t.isReactComponent);\n            }(e));\n            if (\"string\" == typeof e) return Oe(e);\n            switch(e){\n                case l:\n                    return Oe(\"Suspense\");\n                case f:\n                    return Oe(\"SuspenseList\");\n            }\n            if (\"object\" == typeof e) switch(e.$$typeof){\n                case s:\n                    return xe(e.render, !1);\n                case p:\n                    return $e(e.type, t, r);\n                case d:\n                    var n = e._payload, o = e._init;\n                    try {\n                        return $e(o(n), t, r);\n                    } catch (e) {}\n            }\n            return \"\";\n        }\n        Ee = new Pe;\n        var Te, De = {}, Ie = R.ReactDebugCurrentFrame;\n        function Le(e) {\n            if (e) {\n                var t = e._owner, r = $e(e.type, e._source, t ? t.type : null);\n                Ie.setExtraStackFrame(r);\n            } else Ie.setExtraStackFrame(null);\n        }\n        function Ne(e) {\n            if (e) {\n                var t = e._owner;\n                k($e(e.type, e._source, t ? t.type : null));\n            } else k(null);\n        }\n        function Ae() {\n            if (_.current) {\n                var e = Y(_.current.type);\n                if (e) return \"\\n\\nCheck the render method of `\" + e + \"`.\";\n            }\n            return \"\";\n        }\n        function Fe(e) {\n            return null != e && void 0 !== (t = e.__source) ? \"\\n\\nCheck your code at \" + t.fileName.replace(/^.*[\\\\\\/]/, \"\") + \":\" + t.lineNumber + \".\" : \"\";\n            var t;\n        }\n        Te = !1;\n        var Me = {};\n        function Ve(e, t) {\n            if (e._store && !e._store.validated && null == e.key) {\n                e._store.validated = !0;\n                var r = function(e) {\n                    var t = Ae();\n                    if (!t) {\n                        var r = \"string\" == typeof e ? e : e.displayName || e.name;\n                        r && (t = \"\\n\\nCheck the top-level render call using <\" + r + \">.\");\n                    }\n                    return t;\n                }(t);\n                if (!Me[r]) {\n                    Me[r] = !0;\n                    var n = \"\";\n                    e && e._owner && e._owner !== _.current && (n = \" It was passed a child from \" + Y(e._owner.type) + \".\"), Ne(e), O('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', r, n), Ne(null);\n                }\n            }\n        }\n        function Ue(e, t) {\n            if (\"object\" == typeof e) {\n                if (U(e)) for(var r = 0; r < e.length; r++){\n                    var n = e[r];\n                    ae(n) && Ve(n, t);\n                }\n                else if (ae(e)) e._store && (e._store.validated = !0);\n                else if (e) {\n                    var o = v(e);\n                    if (\"function\" == typeof o && o !== e.entries) for(var a, u = o.call(e); !(a = u.next()).done;)ae(a.value) && Ve(a.value, t);\n                }\n            }\n        }\n        function ze(e) {\n            var t, r = e.type;\n            if (null != r && \"string\" != typeof r) {\n                if (\"function\" == typeof r) t = r.propTypes;\n                else {\n                    if (\"object\" != typeof r || r.$$typeof !== s && r.$$typeof !== p) return;\n                    t = r.propTypes;\n                }\n                if (t) {\n                    var n = Y(r);\n                    !function(e, t, r, n, o) {\n                        var a = Function.call.bind(K);\n                        for(var u in e)if (a(e, u)) {\n                            var i = void 0;\n                            try {\n                                if (\"function\" != typeof e[u]) {\n                                    var c = Error((n || \"React class\") + \": prop type `\" + u + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof e[u] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                    throw c.name = \"Invariant Violation\", c;\n                                }\n                                i = e[u](t, u, n, \"prop\", null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                            } catch (e) {\n                                i = e;\n                            }\n                            !i || i instanceof Error || (Le(o), O(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", n || \"React class\", \"prop\", u, typeof i), Le(null)), i instanceof Error && !(i.message in De) && (De[i.message] = !0, Le(o), O(\"Failed %s type: %s\", \"prop\", i.message), Le(null));\n                        }\n                    }(t, e.props, 0, n, e);\n                } else void 0 === r.PropTypes || Te || (Te = !0, O(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", Y(r) || \"Unknown\"));\n                \"function\" != typeof r.getDefaultProps || r.getDefaultProps.isReactClassApproved || O(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n            }\n        }\n        function qe(e) {\n            for(var t = Object.keys(e.props), r = 0; r < t.length; r++){\n                var n = t[r];\n                if (\"children\" !== n && \"key\" !== n) {\n                    Ne(e), O(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", n), Ne(null);\n                    break;\n                }\n            }\n            null !== e.ref && (Ne(e), O(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), Ne(null));\n        }\n        function Be(e, t, n) {\n            var a = de(e);\n            if (!a) {\n                var u = \"\";\n                (void 0 === e || \"object\" == typeof e && null !== e && 0 === Object.keys(e).length) && (u += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n                var i, c = Fe(t);\n                u += c || Ae(), null === e ? i = \"null\" : U(e) ? i = \"array\" : void 0 !== e && e.$$typeof === r ? (i = \"<\" + (Y(e.type) || \"Unknown\") + \" />\", u = \" Did you accidentally export a JSX literal instead of a component?\") : i = typeof e, O(\"React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", i, u);\n            }\n            var s = ne.apply(this, arguments);\n            if (null == s) return s;\n            if (a) for(var l = 2; l < arguments.length; l++)Ue(arguments[l], e);\n            return e === o ? qe(s) : ze(s), s;\n        }\n        var Ye = !1, He = !1, We = null, Ge = 0, Ke = !1;\n        function Je(e) {\n            e !== Ge - 1 && O(\"You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. \"), Ge = e;\n        }\n        function Xe(t, r, n) {\n            var o = b.current;\n            if (null !== o) try {\n                Ze(o), function(a) {\n                    if (null === We) try {\n                        var u = (\"require\" + Math.random()).slice(0, 7);\n                        We = (e && e[u]).call(e, \"timers\").setImmediate;\n                    } catch (e) {\n                        We = function(e) {\n                            !1 === He && (He = !0, \"undefined\" == typeof MessageChannel && O(\"This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.\"));\n                            var t = new MessageChannel;\n                            t.port1.onmessage = e, t.port2.postMessage(void 0);\n                        };\n                    }\n                    We(function() {\n                        0 === o.length ? (b.current = null, r(t)) : Xe(t, r, n);\n                    });\n                }();\n            } catch (e) {\n                n(e);\n            }\n            else r(t);\n        }\n        var Qe = !1;\n        function Ze(e) {\n            if (!Qe) {\n                Qe = !0;\n                var t = 0;\n                try {\n                    for(; t < e.length; t++){\n                        var r = e[t];\n                        do {\n                            r = r(!0);\n                        }while (null !== r);\n                    }\n                    e.length = 0;\n                } catch (r) {\n                    throw e = e.slice(t + 1), r;\n                } finally{\n                    Qe = !1;\n                }\n            }\n        }\n        var et = Be;\n        t.Children = {\n            map: fe,\n            forEach: function(e, t, r) {\n                fe(e, function() {\n                    t.apply(this, arguments);\n                }, r);\n            },\n            count: function(e) {\n                var t = 0;\n                return fe(e, function() {\n                    t++;\n                }), t;\n            },\n            toArray: function(e) {\n                return fe(e, function(e) {\n                    return e;\n                }) || [];\n            },\n            only: function(e) {\n                if (!ae(e)) throw new Error(\"React.Children.only expected to receive a single React element child.\");\n                return e;\n            }\n        }, t.Component = D, t.Fragment = o, t.Profiler = u, t.PureComponent = F, t.StrictMode = a, t.Suspense = l, t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = R, t.cloneElement = function(e, t, r) {\n            for(var n = oe.apply(this, arguments), o = 2; o < arguments.length; o++)Ue(arguments[o], n.type);\n            return ze(n), n;\n        }, t.createContext = function(e) {\n            var t = {\n                $$typeof: c,\n                _currentValue: e,\n                _currentValue2: e,\n                _threadCount: 0,\n                Provider: null,\n                Consumer: null,\n                _defaultValue: null,\n                _globalName: null\n            };\n            t.Provider = {\n                $$typeof: i,\n                _context: t\n            };\n            var r = !1, n = !1, o = !1, a = {\n                $$typeof: c,\n                _context: t\n            };\n            return Object.defineProperties(a, {\n                Provider: {\n                    get: function() {\n                        return n || (n = !0, O(\"Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?\")), t.Provider;\n                    },\n                    set: function(e) {\n                        t.Provider = e;\n                    }\n                },\n                _currentValue: {\n                    get: function() {\n                        return t._currentValue;\n                    },\n                    set: function(e) {\n                        t._currentValue = e;\n                    }\n                },\n                _currentValue2: {\n                    get: function() {\n                        return t._currentValue2;\n                    },\n                    set: function(e) {\n                        t._currentValue2 = e;\n                    }\n                },\n                _threadCount: {\n                    get: function() {\n                        return t._threadCount;\n                    },\n                    set: function(e) {\n                        t._threadCount = e;\n                    }\n                },\n                Consumer: {\n                    get: function() {\n                        return r || (r = !0, O(\"Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?\")), t.Consumer;\n                    }\n                },\n                displayName: {\n                    get: function() {\n                        return t.displayName;\n                    },\n                    set: function(e) {\n                        o || (C(\"Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.\", e), o = !0);\n                    }\n                }\n            }), t.Consumer = a, t._currentRenderer = null, t._currentRenderer2 = null, t;\n        }, t.createElement = et, t.createFactory = function(e) {\n            var t = Be.bind(null, e);\n            return t.type = e, Ye || (Ye = !0, C(\"React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.\")), Object.defineProperty(t, \"type\", {\n                enumerable: !1,\n                get: function() {\n                    return C(\"Factory.type is deprecated. Access the class directly before passing it to createFactory.\"), Object.defineProperty(this, \"type\", {\n                        value: e\n                    }), e;\n                }\n            }), t;\n        }, t.createRef = function() {\n            var e = {\n                current: null\n            };\n            return Object.seal(e), e;\n        }, t.forwardRef = function(e) {\n            null != e && e.$$typeof === p ? O(\"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).\") : \"function\" != typeof e ? O(\"forwardRef requires a render function but was given %s.\", null === e ? \"null\" : typeof e) : 0 !== e.length && 2 !== e.length && O(\"forwardRef render functions accept exactly two parameters: props and ref. %s\", 1 === e.length ? \"Did you forget to use the ref parameter?\" : \"Any additional parameter will be undefined.\"), null != e && (null == e.defaultProps && null == e.propTypes || O(\"forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?\"));\n            var t, r = {\n                $$typeof: s,\n                render: e\n            };\n            return Object.defineProperty(r, \"displayName\", {\n                enumerable: !1,\n                configurable: !0,\n                get: function() {\n                    return t;\n                },\n                set: function(r) {\n                    t = r, e.name || e.displayName || (e.displayName = r);\n                }\n            }), r;\n        }, t.isValidElement = ae, t.lazy = function(e) {\n            var t, r, n = {\n                $$typeof: d,\n                _payload: {\n                    _status: -1,\n                    _result: e\n                },\n                _init: pe\n            };\n            return Object.defineProperties(n, {\n                defaultProps: {\n                    configurable: !0,\n                    get: function() {\n                        return t;\n                    },\n                    set: function(e) {\n                        O(\"React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.\"), t = e, Object.defineProperty(n, \"defaultProps\", {\n                            enumerable: !0\n                        });\n                    }\n                },\n                propTypes: {\n                    configurable: !0,\n                    get: function() {\n                        return r;\n                    },\n                    set: function(e) {\n                        O(\"React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.\"), r = e, Object.defineProperty(n, \"propTypes\", {\n                            enumerable: !0\n                        });\n                    }\n                }\n            }), n;\n        }, t.memo = function(e, t) {\n            de(e) || O(\"memo: The first argument must be a component. Instead received: %s\", null === e ? \"null\" : typeof e);\n            var r, n = {\n                $$typeof: p,\n                type: e,\n                compare: void 0 === t ? null : t\n            };\n            return Object.defineProperty(n, \"displayName\", {\n                enumerable: !1,\n                configurable: !0,\n                get: function() {\n                    return r;\n                },\n                set: function(t) {\n                    r = t, e.name || e.displayName || (e.displayName = t);\n                }\n            }), n;\n        }, t.startTransition = function(e, t) {\n            var r = g.transition;\n            g.transition = {};\n            var n = g.transition;\n            g.transition._updatedFibers = new Set;\n            try {\n                e();\n            } finally{\n                g.transition = r, null === r && n._updatedFibers && (n._updatedFibers.size > 10 && C(\"Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.\"), n._updatedFibers.clear());\n            }\n        }, t.unstable_act = function(e) {\n            var t = Ge;\n            Ge++, null === b.current && (b.current = []);\n            var r, n = b.isBatchingLegacy;\n            try {\n                if (b.isBatchingLegacy = !0, r = e(), !n && b.didScheduleLegacyUpdate) {\n                    var o = b.current;\n                    null !== o && (b.didScheduleLegacyUpdate = !1, Ze(o));\n                }\n            } catch (e) {\n                throw Je(t), e;\n            } finally{\n                b.isBatchingLegacy = n;\n            }\n            if (null !== r && \"object\" == typeof r && \"function\" == typeof r.then) {\n                var a = r, u = !1, i = {\n                    then: function(e, r) {\n                        u = !0, a.then(function(n) {\n                            Je(t), 0 === Ge ? Xe(n, e, r) : e(n);\n                        }, function(e) {\n                            Je(t), r(e);\n                        });\n                    }\n                };\n                return Ke || \"undefined\" == typeof Promise || Promise.resolve().then(function() {}).then(function() {\n                    u || (Ke = !0, O(\"You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);\"));\n                }), i;\n            }\n            var c = r;\n            if (Je(t), 0 === Ge) {\n                var s = b.current;\n                return null !== s && (Ze(s), b.current = null), {\n                    then: function(e, t) {\n                        null === b.current ? (b.current = [], Xe(c, e, t)) : e(c);\n                    }\n                };\n            }\n            return {\n                then: function(e, t) {\n                    e(c);\n                }\n            };\n        }, t.useCallback = function(e, t) {\n            return ye().useCallback(e, t);\n        }, t.useContext = function(e) {\n            var t = ye();\n            if (void 0 !== e._context) {\n                var r = e._context;\n                r.Consumer === e ? O(\"Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?\") : r.Provider === e && O(\"Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?\");\n            }\n            return t.useContext(e);\n        }, t.useDebugValue = function(e, t) {\n            return ye().useDebugValue(e, t);\n        }, t.useDeferredValue = function(e) {\n            return ye().useDeferredValue(e);\n        }, t.useEffect = function(e, t) {\n            return ye().useEffect(e, t);\n        }, t.useId = function() {\n            return ye().useId();\n        }, t.useImperativeHandle = function(e, t, r) {\n            return ye().useImperativeHandle(e, t, r);\n        }, t.useInsertionEffect = function(e, t) {\n            return ye().useInsertionEffect(e, t);\n        }, t.useLayoutEffect = function(e, t) {\n            return ye().useLayoutEffect(e, t);\n        }, t.useMemo = function(e, t) {\n            return ye().useMemo(e, t);\n        }, t.useReducer = function(e, t, r) {\n            return ye().useReducer(e, t, r);\n        }, t.useRef = function(e) {\n            return ye().useRef(e);\n        }, t.useState = function(e) {\n            return ye().useState(e);\n        }, t.useSyncExternalStore = function(e, t, r) {\n            return ye().useSyncExternalStore(e, t, r);\n        }, t.useTransition = function() {\n            return ye().useTransition();\n        }, t.version = \"18.2.0\", \"undefined\" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && \"function\" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);\n    }();\n}), L = t(function(e) {\n    e.exports =  false ? 0 : I;\n}), N = {\n    borderRadius: \"4rem\",\n    width: \"8rem\"\n};\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(t) {\n    var r = t.src, n = void 0 === r ? \"\" : r, o = t.children, a = t.targetTop, u = void 0 === a ? \"5%\" : a, i = t.targetLeft, c = void 0 === i ? \"5%\" : i, s = t.customAnimation, l = void 0 === s ? \"\" : s, f = t.animationDuration, p = void 0 === f ? .9 : f, d = t.flyingItemStyling, y = void 0 === d ? N : d, m = null == L ? void 0 : L.useRef(null);\n    return L.createElement(\"div\", null, L.createElement(\"style\", null, \"\\n    .flying_image {\\n      --target-position-x: 0px;\\n      --target-position-y: 0px;\\n    \\n      display: block;\\n      position: fixed;\\n      top: var(--target-position-y);\\n      left: var(--target-position-x);\\n      translate: -50% -50%;\\n      animation: fly \" + p + \"s 1;\\n    }\\n    @keyframes fly {\\n      0% {\\n        top: var(--target-position-y);\\n        left: var(--target-position-x);\\n        opacity: 1;\\n      }\\n      \" + l + \"\\n      100% {\\n        top: \" + u + \";\\n        left: \" + c + \";\\n        opacity: 0;\\n      }\\n    }\\n  \"), L.createElement(\"button\", {\n        onClick: function(e) {\n            return function(e) {\n                m.current.style.setProperty(\"--target-position-x\", e.clientX + \"px\"), m.current.style.setProperty(\"--target-position-y\", e.clientY + \"px\"), m.current.style.setProperty(\"display\", \"\"), m.current.src = n, setTimeout(function() {\n                    return m.current.style.setProperty(\"display\", \"none\");\n                }, 1e3 * p - 100);\n            }(e);\n        }\n    }, o), L.createElement(\"img\", {\n        src: \"\",\n        alt: \"\",\n        className: \"flying_image\",\n        style: e({\n            display: \"none\"\n        }, N, y),\n        ref: m\n    }));\n} //# sourceMappingURL=index.modern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-flying-item/dist/index.modern.js\n");

/***/ })

};
;